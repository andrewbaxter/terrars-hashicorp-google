use serde::Serialize;
use std::cell::RefCell;
use std::rc::Rc;
use terrars::*;
use super::provider::ProviderGoogle;

#[derive(Serialize)]
struct DataCloudRunServiceData {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    depends_on: Vec<String>,
    #[serde(skip_serializing_if = "SerdeSkipDefault::is_default")]
    provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    for_each: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<PrimField<String>>,
    location: PrimField<String>,
    name: PrimField<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    project: Option<PrimField<String>>,
}

struct DataCloudRunService_ {
    shared: StackShared,
    tf_id: String,
    data: RefCell<DataCloudRunServiceData>,
}

#[derive(Clone)]
pub struct DataCloudRunService(Rc<DataCloudRunService_>);

impl DataCloudRunService {
    fn shared(&self) -> &StackShared {
        &self.0.shared
    }

    pub fn depends_on(self, dep: &impl Referable) -> Self {
        self.0.data.borrow_mut().depends_on.push(dep.extract_ref());
        self
    }

    pub fn set_provider(&self, provider: &ProviderGoogle) -> &Self {
        self.0.data.borrow_mut().provider = Some(provider.provider_ref());
        self
    }

    #[doc= "Set the field `id`.\n"]
    pub fn set_id(self, v: impl Into<PrimField<String>>) -> Self {
        self.0.data.borrow_mut().id = Some(v.into());
        self
    }

    #[doc= "Set the field `project`.\n"]
    pub fn set_project(self, v: impl Into<PrimField<String>>) -> Self {
        self.0.data.borrow_mut().project = Some(v.into());
        self
    }

    #[doc= "Get a reference to the value of field `autogenerate_revision_name` after provisioning.\nIf set to 'true', the revision name (template.metadata.name) will be omitted and\nautogenerated by Cloud Run. This cannot be set to 'true' while 'template.metadata.name'\nis also set.\n(For legacy support, if 'template.metadata.name' is unset in state while\nthis field is set to false, the revision name will still autogenerate.)"]
    pub fn autogenerate_revision_name(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.autogenerate_revision_name", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `id` after provisioning.\n"]
    pub fn id(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.id", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `location` after provisioning.\nThe location of the cloud run instance. eg us-central1"]
    pub fn location(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.location", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `metadata` after provisioning.\nMetadata associated with this Service, including name, namespace, labels,\nand annotations."]
    pub fn metadata(&self) -> ListRef<DataCloudRunServiceMetadataElRef> {
        ListRef::new(self.shared().clone(), format!("{}.metadata", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\nName must be unique within a Google Cloud project and region.\nIs required when creating resources. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `project` after provisioning.\n"]
    pub fn project(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.project", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `status` after provisioning.\nThe current status of the Service."]
    pub fn status(&self) -> ListRef<DataCloudRunServiceStatusElRef> {
        ListRef::new(self.shared().clone(), format!("{}.status", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `template` after provisioning.\ntemplate holds the latest specification for the Revision to\nbe stamped out. The template references the container image, and may also\ninclude labels and annotations that should be attached to the Revision.\nTo correlate a Revision, and/or to force a Revision to be created when the\nspec doesn't otherwise change, a nonce label may be provided in the\ntemplate metadata. For more details, see:\nhttps://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions\n\nCloud Run does not currently support referencing a build that is\nresponsible for materializing the container image from source."]
    pub fn template(&self) -> ListRef<DataCloudRunServiceTemplateElRef> {
        ListRef::new(self.shared().clone(), format!("{}.template", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `traffic` after provisioning.\nTraffic specifies how to distribute traffic over a collection of Knative Revisions\nand Configurations"]
    pub fn traffic(&self) -> ListRef<DataCloudRunServiceTrafficElRef> {
        ListRef::new(self.shared().clone(), format!("{}.traffic", self.extract_ref()))
    }
}

impl Referable for DataCloudRunService {
    fn extract_ref(&self) -> String {
        format!("data.{}.{}", self.0.extract_datasource_type(), self.0.extract_tf_id())
    }
}

impl Datasource for DataCloudRunService { }

impl ToListMappable for DataCloudRunService {
    type O = ListRef<DataCloudRunServiceRef>;

    fn do_map(self, base: String) -> Self::O {
        self.0.data.borrow_mut().for_each = Some(format!("${{{}}}", base));
        ListRef::new(self.0.shared.clone(), self.extract_ref())
    }
}

impl Datasource_ for DataCloudRunService_ {
    fn extract_datasource_type(&self) -> String {
        "google_cloud_run_service".into()
    }

    fn extract_tf_id(&self) -> String {
        self.tf_id.clone()
    }

    fn extract_value(&self) -> serde_json::Value {
        serde_json::to_value(&self.data).unwrap()
    }
}

pub struct BuildDataCloudRunService {
    pub tf_id: String,
    #[doc= "The location of the cloud run instance. eg us-central1"]
    pub location: PrimField<String>,
    #[doc= "Name must be unique within a Google Cloud project and region.\nIs required when creating resources. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"]
    pub name: PrimField<String>,
}

impl BuildDataCloudRunService {
    pub fn build(self, stack: &mut Stack) -> DataCloudRunService {
        let out = DataCloudRunService(Rc::new(DataCloudRunService_ {
            shared: stack.shared.clone(),
            tf_id: self.tf_id,
            data: RefCell::new(DataCloudRunServiceData {
                depends_on: core::default::Default::default(),
                provider: None,
                for_each: None,
                id: core::default::Default::default(),
                location: self.location,
                name: self.name,
                project: core::default::Default::default(),
            }),
        }));
        stack.add_datasource(out.0.clone());
        out
    }
}

pub struct DataCloudRunServiceRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceRef {
    fn new(shared: StackShared, base: String) -> Self {
        Self {
            shared: shared,
            base: base,
        }
    }
}

impl DataCloudRunServiceRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    fn extract_ref(&self) -> String {
        self.base.clone()
    }

    #[doc= "Get a reference to the value of field `autogenerate_revision_name` after provisioning.\nIf set to 'true', the revision name (template.metadata.name) will be omitted and\nautogenerated by Cloud Run. This cannot be set to 'true' while 'template.metadata.name'\nis also set.\n(For legacy support, if 'template.metadata.name' is unset in state while\nthis field is set to false, the revision name will still autogenerate.)"]
    pub fn autogenerate_revision_name(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.autogenerate_revision_name", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `id` after provisioning.\n"]
    pub fn id(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.id", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `location` after provisioning.\nThe location of the cloud run instance. eg us-central1"]
    pub fn location(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.location", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `metadata` after provisioning.\nMetadata associated with this Service, including name, namespace, labels,\nand annotations."]
    pub fn metadata(&self) -> ListRef<DataCloudRunServiceMetadataElRef> {
        ListRef::new(self.shared().clone(), format!("{}.metadata", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\nName must be unique within a Google Cloud project and region.\nIs required when creating resources. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `project` after provisioning.\n"]
    pub fn project(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.project", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `status` after provisioning.\nThe current status of the Service."]
    pub fn status(&self) -> ListRef<DataCloudRunServiceStatusElRef> {
        ListRef::new(self.shared().clone(), format!("{}.status", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `template` after provisioning.\ntemplate holds the latest specification for the Revision to\nbe stamped out. The template references the container image, and may also\ninclude labels and annotations that should be attached to the Revision.\nTo correlate a Revision, and/or to force a Revision to be created when the\nspec doesn't otherwise change, a nonce label may be provided in the\ntemplate metadata. For more details, see:\nhttps://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions\n\nCloud Run does not currently support referencing a build that is\nresponsible for materializing the container image from source."]
    pub fn template(&self) -> ListRef<DataCloudRunServiceTemplateElRef> {
        ListRef::new(self.shared().clone(), format!("{}.template", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `traffic` after provisioning.\nTraffic specifies how to distribute traffic over a collection of Knative Revisions\nand Configurations"]
    pub fn traffic(&self) -> ListRef<DataCloudRunServiceTrafficElRef> {
        ListRef::new(self.shared().clone(), format!("{}.traffic", self.extract_ref()))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceMetadataEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    annotations: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    effective_annotations: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    effective_labels: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    generation: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    labels: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    namespace: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    resource_version: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    self_link: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    terraform_labels: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    uid: Option<PrimField<String>>,
}

impl DataCloudRunServiceMetadataEl {
    #[doc= "Set the field `annotations`.\n"]
    pub fn set_annotations(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.annotations = Some(v.into());
        self
    }

    #[doc= "Set the field `effective_annotations`.\n"]
    pub fn set_effective_annotations(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.effective_annotations = Some(v.into());
        self
    }

    #[doc= "Set the field `effective_labels`.\n"]
    pub fn set_effective_labels(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.effective_labels = Some(v.into());
        self
    }

    #[doc= "Set the field `generation`.\n"]
    pub fn set_generation(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.generation = Some(v.into());
        self
    }

    #[doc= "Set the field `labels`.\n"]
    pub fn set_labels(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.labels = Some(v.into());
        self
    }

    #[doc= "Set the field `namespace`.\n"]
    pub fn set_namespace(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.namespace = Some(v.into());
        self
    }

    #[doc= "Set the field `resource_version`.\n"]
    pub fn set_resource_version(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.resource_version = Some(v.into());
        self
    }

    #[doc= "Set the field `self_link`.\n"]
    pub fn set_self_link(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.self_link = Some(v.into());
        self
    }

    #[doc= "Set the field `terraform_labels`.\n"]
    pub fn set_terraform_labels(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.terraform_labels = Some(v.into());
        self
    }

    #[doc= "Set the field `uid`.\n"]
    pub fn set_uid(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.uid = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceMetadataEl {
    type O = BlockAssignable<DataCloudRunServiceMetadataEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceMetadataEl {}

impl BuildDataCloudRunServiceMetadataEl {
    pub fn build(self) -> DataCloudRunServiceMetadataEl {
        DataCloudRunServiceMetadataEl {
            annotations: core::default::Default::default(),
            effective_annotations: core::default::Default::default(),
            effective_labels: core::default::Default::default(),
            generation: core::default::Default::default(),
            labels: core::default::Default::default(),
            namespace: core::default::Default::default(),
            resource_version: core::default::Default::default(),
            self_link: core::default::Default::default(),
            terraform_labels: core::default::Default::default(),
            uid: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceMetadataElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceMetadataElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceMetadataElRef {
        DataCloudRunServiceMetadataElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceMetadataElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `annotations` after provisioning.\n"]
    pub fn annotations(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.annotations", self.base))
    }

    #[doc= "Get a reference to the value of field `effective_annotations` after provisioning.\n"]
    pub fn effective_annotations(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.effective_annotations", self.base))
    }

    #[doc= "Get a reference to the value of field `effective_labels` after provisioning.\n"]
    pub fn effective_labels(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.effective_labels", self.base))
    }

    #[doc= "Get a reference to the value of field `generation` after provisioning.\n"]
    pub fn generation(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.generation", self.base))
    }

    #[doc= "Get a reference to the value of field `labels` after provisioning.\n"]
    pub fn labels(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.labels", self.base))
    }

    #[doc= "Get a reference to the value of field `namespace` after provisioning.\n"]
    pub fn namespace(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.namespace", self.base))
    }

    #[doc= "Get a reference to the value of field `resource_version` after provisioning.\n"]
    pub fn resource_version(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.resource_version", self.base))
    }

    #[doc= "Get a reference to the value of field `self_link` after provisioning.\n"]
    pub fn self_link(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.self_link", self.base))
    }

    #[doc= "Get a reference to the value of field `terraform_labels` after provisioning.\n"]
    pub fn terraform_labels(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.terraform_labels", self.base))
    }

    #[doc= "Get a reference to the value of field `uid` after provisioning.\n"]
    pub fn uid(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.uid", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceStatusElConditionsEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    message: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    reason: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    status: Option<PrimField<String>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    type_: Option<PrimField<String>>,
}

impl DataCloudRunServiceStatusElConditionsEl {
    #[doc= "Set the field `message`.\n"]
    pub fn set_message(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.message = Some(v.into());
        self
    }

    #[doc= "Set the field `reason`.\n"]
    pub fn set_reason(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.reason = Some(v.into());
        self
    }

    #[doc= "Set the field `status`.\n"]
    pub fn set_status(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.status = Some(v.into());
        self
    }

    #[doc= "Set the field `type_`.\n"]
    pub fn set_type(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.type_ = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceStatusElConditionsEl {
    type O = BlockAssignable<DataCloudRunServiceStatusElConditionsEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceStatusElConditionsEl {}

impl BuildDataCloudRunServiceStatusElConditionsEl {
    pub fn build(self) -> DataCloudRunServiceStatusElConditionsEl {
        DataCloudRunServiceStatusElConditionsEl {
            message: core::default::Default::default(),
            reason: core::default::Default::default(),
            status: core::default::Default::default(),
            type_: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceStatusElConditionsElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceStatusElConditionsElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceStatusElConditionsElRef {
        DataCloudRunServiceStatusElConditionsElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceStatusElConditionsElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `message` after provisioning.\n"]
    pub fn message(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.message", self.base))
    }

    #[doc= "Get a reference to the value of field `reason` after provisioning.\n"]
    pub fn reason(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.reason", self.base))
    }

    #[doc= "Get a reference to the value of field `status` after provisioning.\n"]
    pub fn status(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.status", self.base))
    }

    #[doc= "Get a reference to the value of field `type_` after provisioning.\n"]
    pub fn type_(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.type", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceStatusElTrafficEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    latest_revision: Option<PrimField<bool>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    percent: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    revision_name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    tag: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    url: Option<PrimField<String>>,
}

impl DataCloudRunServiceStatusElTrafficEl {
    #[doc= "Set the field `latest_revision`.\n"]
    pub fn set_latest_revision(mut self, v: impl Into<PrimField<bool>>) -> Self {
        self.latest_revision = Some(v.into());
        self
    }

    #[doc= "Set the field `percent`.\n"]
    pub fn set_percent(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.percent = Some(v.into());
        self
    }

    #[doc= "Set the field `revision_name`.\n"]
    pub fn set_revision_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.revision_name = Some(v.into());
        self
    }

    #[doc= "Set the field `tag`.\n"]
    pub fn set_tag(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.tag = Some(v.into());
        self
    }

    #[doc= "Set the field `url`.\n"]
    pub fn set_url(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.url = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceStatusElTrafficEl {
    type O = BlockAssignable<DataCloudRunServiceStatusElTrafficEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceStatusElTrafficEl {}

impl BuildDataCloudRunServiceStatusElTrafficEl {
    pub fn build(self) -> DataCloudRunServiceStatusElTrafficEl {
        DataCloudRunServiceStatusElTrafficEl {
            latest_revision: core::default::Default::default(),
            percent: core::default::Default::default(),
            revision_name: core::default::Default::default(),
            tag: core::default::Default::default(),
            url: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceStatusElTrafficElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceStatusElTrafficElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceStatusElTrafficElRef {
        DataCloudRunServiceStatusElTrafficElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceStatusElTrafficElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `latest_revision` after provisioning.\n"]
    pub fn latest_revision(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.latest_revision", self.base))
    }

    #[doc= "Get a reference to the value of field `percent` after provisioning.\n"]
    pub fn percent(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.percent", self.base))
    }

    #[doc= "Get a reference to the value of field `revision_name` after provisioning.\n"]
    pub fn revision_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.revision_name", self.base))
    }

    #[doc= "Get a reference to the value of field `tag` after provisioning.\n"]
    pub fn tag(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.tag", self.base))
    }

    #[doc= "Get a reference to the value of field `url` after provisioning.\n"]
    pub fn url(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.url", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceStatusEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    conditions: Option<ListField<DataCloudRunServiceStatusElConditionsEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    latest_created_revision_name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    latest_ready_revision_name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    observed_generation: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    traffic: Option<ListField<DataCloudRunServiceStatusElTrafficEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    url: Option<PrimField<String>>,
}

impl DataCloudRunServiceStatusEl {
    #[doc= "Set the field `conditions`.\n"]
    pub fn set_conditions(mut self, v: impl Into<ListField<DataCloudRunServiceStatusElConditionsEl>>) -> Self {
        self.conditions = Some(v.into());
        self
    }

    #[doc= "Set the field `latest_created_revision_name`.\n"]
    pub fn set_latest_created_revision_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.latest_created_revision_name = Some(v.into());
        self
    }

    #[doc= "Set the field `latest_ready_revision_name`.\n"]
    pub fn set_latest_ready_revision_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.latest_ready_revision_name = Some(v.into());
        self
    }

    #[doc= "Set the field `observed_generation`.\n"]
    pub fn set_observed_generation(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.observed_generation = Some(v.into());
        self
    }

    #[doc= "Set the field `traffic`.\n"]
    pub fn set_traffic(mut self, v: impl Into<ListField<DataCloudRunServiceStatusElTrafficEl>>) -> Self {
        self.traffic = Some(v.into());
        self
    }

    #[doc= "Set the field `url`.\n"]
    pub fn set_url(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.url = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceStatusEl {
    type O = BlockAssignable<DataCloudRunServiceStatusEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceStatusEl {}

impl BuildDataCloudRunServiceStatusEl {
    pub fn build(self) -> DataCloudRunServiceStatusEl {
        DataCloudRunServiceStatusEl {
            conditions: core::default::Default::default(),
            latest_created_revision_name: core::default::Default::default(),
            latest_ready_revision_name: core::default::Default::default(),
            observed_generation: core::default::Default::default(),
            traffic: core::default::Default::default(),
            url: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceStatusElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceStatusElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceStatusElRef {
        DataCloudRunServiceStatusElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceStatusElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `conditions` after provisioning.\n"]
    pub fn conditions(&self) -> ListRef<DataCloudRunServiceStatusElConditionsElRef> {
        ListRef::new(self.shared().clone(), format!("{}.conditions", self.base))
    }

    #[doc= "Get a reference to the value of field `latest_created_revision_name` after provisioning.\n"]
    pub fn latest_created_revision_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.latest_created_revision_name", self.base))
    }

    #[doc= "Get a reference to the value of field `latest_ready_revision_name` after provisioning.\n"]
    pub fn latest_ready_revision_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.latest_ready_revision_name", self.base))
    }

    #[doc= "Get a reference to the value of field `observed_generation` after provisioning.\n"]
    pub fn observed_generation(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.observed_generation", self.base))
    }

    #[doc= "Get a reference to the value of field `traffic` after provisioning.\n"]
    pub fn traffic(&self) -> ListRef<DataCloudRunServiceStatusElTrafficElRef> {
        ListRef::new(self.shared().clone(), format!("{}.traffic", self.base))
    }

    #[doc= "Get a reference to the value of field `url` after provisioning.\n"]
    pub fn url(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.url", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElMetadataEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    annotations: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    generation: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    labels: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    namespace: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    resource_version: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    self_link: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    uid: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElMetadataEl {
    #[doc= "Set the field `annotations`.\n"]
    pub fn set_annotations(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.annotations = Some(v.into());
        self
    }

    #[doc= "Set the field `generation`.\n"]
    pub fn set_generation(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.generation = Some(v.into());
        self
    }

    #[doc= "Set the field `labels`.\n"]
    pub fn set_labels(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.labels = Some(v.into());
        self
    }

    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `namespace`.\n"]
    pub fn set_namespace(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.namespace = Some(v.into());
        self
    }

    #[doc= "Set the field `resource_version`.\n"]
    pub fn set_resource_version(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.resource_version = Some(v.into());
        self
    }

    #[doc= "Set the field `self_link`.\n"]
    pub fn set_self_link(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.self_link = Some(v.into());
        self
    }

    #[doc= "Set the field `uid`.\n"]
    pub fn set_uid(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.uid = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElMetadataEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElMetadataEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElMetadataEl {}

impl BuildDataCloudRunServiceTemplateElMetadataEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElMetadataEl {
        DataCloudRunServiceTemplateElMetadataEl {
            annotations: core::default::Default::default(),
            generation: core::default::Default::default(),
            labels: core::default::Default::default(),
            name: core::default::Default::default(),
            namespace: core::default::Default::default(),
            resource_version: core::default::Default::default(),
            self_link: core::default::Default::default(),
            uid: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElMetadataElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElMetadataElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElMetadataElRef {
        DataCloudRunServiceTemplateElMetadataElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElMetadataElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `annotations` after provisioning.\n"]
    pub fn annotations(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.annotations", self.base))
    }

    #[doc= "Get a reference to the value of field `generation` after provisioning.\n"]
    pub fn generation(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.generation", self.base))
    }

    #[doc= "Get a reference to the value of field `labels` after provisioning.\n"]
    pub fn labels(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.labels", self.base))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `namespace` after provisioning.\n"]
    pub fn namespace(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.namespace", self.base))
    }

    #[doc= "Get a reference to the value of field `resource_version` after provisioning.\n"]
    pub fn resource_version(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.resource_version", self.base))
    }

    #[doc= "Get a reference to the value of field `self_link` after provisioning.\n"]
    pub fn self_link(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.self_link", self.base))
    }

    #[doc= "Get a reference to the value of field `uid` after provisioning.\n"]
    pub fn uid(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.uid", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    key: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
    #[doc= "Set the field `key`.\n"]
    pub fn set_key(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.key = Some(v.into());
        self
    }

    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl {
            key: core::default::Default::default(),
            name: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `key` after provisioning.\n"]
    pub fn key(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.key", self.base))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    secret_key_ref: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
    #[doc= "Set the field `secret_key_ref`.\n"]
    pub fn set_secret_key_ref(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefEl>>,
    ) -> Self {
        self.secret_key_ref = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl {
            secret_key_ref: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `secret_key_ref` after provisioning.\n"]
    pub fn secret_key_ref(
        &self,
    ) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElSecretKeyRefElRef> {
        ListRef::new(self.shared().clone(), format!("{}.secret_key_ref", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    value: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    value_from: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `value`.\n"]
    pub fn set_value(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.value = Some(v.into());
        self
    }

    #[doc= "Set the field `value_from`.\n"]
    pub fn set_value_from(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromEl>>,
    ) -> Self {
        self.value_from = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvEl {
            name: core::default::Default::default(),
            value: core::default::Default::default(),
            value_from: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElEnvElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `value` after provisioning.\n"]
    pub fn value(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.value", self.base))
    }

    #[doc= "Get a reference to the value of field `value_from` after provisioning.\n"]
    pub fn value_from(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvElValueFromElRef> {
        ListRef::new(self.shared().clone(), format!("{}.value_from", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
    type O =
        BlockAssignable<
            DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl,
        >;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
    pub fn build(
        self,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl {
            name: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    local_object_reference: Option<
        ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl>,
    >,
    #[serde(skip_serializing_if = "Option::is_none")]
    optional: Option<PrimField<bool>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
    #[doc= "Set the field `local_object_reference`.\n"]
    pub fn set_local_object_reference(
        mut self,
        v:
            impl

                    Into<
                        ListField<
                            DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceEl,
                        >,
                    >,
    ) -> Self {
        self.local_object_reference = Some(v.into());
        self
    }

    #[doc= "Set the field `optional`.\n"]
    pub fn set_optional(mut self, v: impl Into<PrimField<bool>>) -> Self {
        self.optional = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl {
            local_object_reference: core::default::Default::default(),
            optional: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `local_object_reference` after provisioning.\n"]
    pub fn local_object_reference(
        &self,
    ) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElLocalObjectReferenceElRef> {
        ListRef::new(self.shared().clone(), format!("{}.local_object_reference", self.base))
    }

    #[doc= "Get a reference to the value of field `optional` after provisioning.\n"]
    pub fn optional(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.optional", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
    type O =
        BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl {
            name: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    local_object_reference: Option<
        ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl>,
    >,
    #[serde(skip_serializing_if = "Option::is_none")]
    optional: Option<PrimField<bool>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
    #[doc= "Set the field `local_object_reference`.\n"]
    pub fn set_local_object_reference(
        mut self,
        v:
            impl

                    Into<
                        ListField<
                            DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceEl,
                        >,
                    >,
    ) -> Self {
        self.local_object_reference = Some(v.into());
        self
    }

    #[doc= "Set the field `optional`.\n"]
    pub fn set_optional(mut self, v: impl Into<PrimField<bool>>) -> Self {
        self.optional = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl {
            local_object_reference: core::default::Default::default(),
            optional: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `local_object_reference` after provisioning.\n"]
    pub fn local_object_reference(
        &self,
    ) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElLocalObjectReferenceElRef> {
        ListRef::new(self.shared().clone(), format!("{}.local_object_reference", self.base))
    }

    #[doc= "Get a reference to the value of field `optional` after provisioning.\n"]
    pub fn optional(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.optional", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    config_map_ref: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    prefix: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    secret_ref: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
    #[doc= "Set the field `config_map_ref`.\n"]
    pub fn set_config_map_ref(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefEl>>,
    ) -> Self {
        self.config_map_ref = Some(v.into());
        self
    }

    #[doc= "Set the field `prefix`.\n"]
    pub fn set_prefix(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.prefix = Some(v.into());
        self
    }

    #[doc= "Set the field `secret_ref`.\n"]
    pub fn set_secret_ref(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefEl>>,
    ) -> Self {
        self.secret_ref = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl {
            config_map_ref: core::default::Default::default(),
            prefix: core::default::Default::default(),
            secret_ref: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef {
        DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `config_map_ref` after provisioning.\n"]
    pub fn config_map_ref(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElConfigMapRefElRef> {
        ListRef::new(self.shared().clone(), format!("{}.config_map_ref", self.base))
    }

    #[doc= "Get a reference to the value of field `prefix` after provisioning.\n"]
    pub fn prefix(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.prefix", self.base))
    }

    #[doc= "Get a reference to the value of field `secret_ref` after provisioning.\n"]
    pub fn secret_ref(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElSecretRefElRef> {
        ListRef::new(self.shared().clone(), format!("{}.secret_ref", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    port: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    service: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
    #[doc= "Set the field `port`.\n"]
    pub fn set_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.port = Some(v.into());
        self
    }

    #[doc= "Set the field `service`.\n"]
    pub fn set_service(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.service = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl {
            port: core::default::Default::default(),
            service: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `port` after provisioning.\n"]
    pub fn port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.port", self.base))
    }

    #[doc= "Get a reference to the value of field `service` after provisioning.\n"]
    pub fn service(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.service", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    value: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `value`.\n"]
    pub fn set_value(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.value = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl {
            name: core::default::Default::default(),
            value: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `value` after provisioning.\n"]
    pub fn value(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.value", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    http_headers: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    path: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    port: Option<PrimField<f64>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
    #[doc= "Set the field `http_headers`.\n"]
    pub fn set_http_headers(
        mut self,
        v:
            impl

                    Into<
                        ListField<
                            DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersEl,
                        >,
                    >,
    ) -> Self {
        self.http_headers = Some(v.into());
        self
    }

    #[doc= "Set the field `path`.\n"]
    pub fn set_path(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.path = Some(v.into());
        self
    }

    #[doc= "Set the field `port`.\n"]
    pub fn set_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.port = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl {
            http_headers: core::default::Default::default(),
            path: core::default::Default::default(),
            port: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `http_headers` after provisioning.\n"]
    pub fn http_headers(
        &self,
    ) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElHttpHeadersElRef> {
        ListRef::new(self.shared().clone(), format!("{}.http_headers", self.base))
    }

    #[doc= "Get a reference to the value of field `path` after provisioning.\n"]
    pub fn path(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.path", self.base))
    }

    #[doc= "Get a reference to the value of field `port` after provisioning.\n"]
    pub fn port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.port", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    failure_threshold: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    grpc: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    http_get: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    initial_delay_seconds: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    period_seconds: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    timeout_seconds: Option<PrimField<f64>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
    #[doc= "Set the field `failure_threshold`.\n"]
    pub fn set_failure_threshold(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.failure_threshold = Some(v.into());
        self
    }

    #[doc= "Set the field `grpc`.\n"]
    pub fn set_grpc(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcEl>>,
    ) -> Self {
        self.grpc = Some(v.into());
        self
    }

    #[doc= "Set the field `http_get`.\n"]
    pub fn set_http_get(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetEl>>,
    ) -> Self {
        self.http_get = Some(v.into());
        self
    }

    #[doc= "Set the field `initial_delay_seconds`.\n"]
    pub fn set_initial_delay_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.initial_delay_seconds = Some(v.into());
        self
    }

    #[doc= "Set the field `period_seconds`.\n"]
    pub fn set_period_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.period_seconds = Some(v.into());
        self
    }

    #[doc= "Set the field `timeout_seconds`.\n"]
    pub fn set_timeout_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.timeout_seconds = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl {
            failure_threshold: core::default::Default::default(),
            grpc: core::default::Default::default(),
            http_get: core::default::Default::default(),
            initial_delay_seconds: core::default::Default::default(),
            period_seconds: core::default::Default::default(),
            timeout_seconds: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef {
        DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `failure_threshold` after provisioning.\n"]
    pub fn failure_threshold(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.failure_threshold", self.base))
    }

    #[doc= "Get a reference to the value of field `grpc` after provisioning.\n"]
    pub fn grpc(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElGrpcElRef> {
        ListRef::new(self.shared().clone(), format!("{}.grpc", self.base))
    }

    #[doc= "Get a reference to the value of field `http_get` after provisioning.\n"]
    pub fn http_get(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElHttpGetElRef> {
        ListRef::new(self.shared().clone(), format!("{}.http_get", self.base))
    }

    #[doc= "Get a reference to the value of field `initial_delay_seconds` after provisioning.\n"]
    pub fn initial_delay_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.initial_delay_seconds", self.base))
    }

    #[doc= "Get a reference to the value of field `period_seconds` after provisioning.\n"]
    pub fn period_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.period_seconds", self.base))
    }

    #[doc= "Get a reference to the value of field `timeout_seconds` after provisioning.\n"]
    pub fn timeout_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.timeout_seconds", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElPortsEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    container_port: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    protocol: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElPortsEl {
    #[doc= "Set the field `container_port`.\n"]
    pub fn set_container_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.container_port = Some(v.into());
        self
    }

    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `protocol`.\n"]
    pub fn set_protocol(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.protocol = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElPortsEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElPortsEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElPortsEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElPortsEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElPortsEl {
        DataCloudRunServiceTemplateElSpecElContainersElPortsEl {
            container_port: core::default::Default::default(),
            name: core::default::Default::default(),
            protocol: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElPortsElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElPortsElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElPortsElRef {
        DataCloudRunServiceTemplateElSpecElContainersElPortsElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElPortsElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `container_port` after provisioning.\n"]
    pub fn container_port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.container_port", self.base))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `protocol` after provisioning.\n"]
    pub fn protocol(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.protocol", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    limits: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    requests: Option<RecField<PrimField<String>>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
    #[doc= "Set the field `limits`.\n"]
    pub fn set_limits(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.limits = Some(v.into());
        self
    }

    #[doc= "Set the field `requests`.\n"]
    pub fn set_requests(mut self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.requests = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElResourcesEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElResourcesEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
        DataCloudRunServiceTemplateElSpecElContainersElResourcesEl {
            limits: core::default::Default::default(),
            requests: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef {
        DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `limits` after provisioning.\n"]
    pub fn limits(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.limits", self.base))
    }

    #[doc= "Get a reference to the value of field `requests` after provisioning.\n"]
    pub fn requests(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.requests", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    port: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    service: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
    #[doc= "Set the field `port`.\n"]
    pub fn set_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.port = Some(v.into());
        self
    }

    #[doc= "Set the field `service`.\n"]
    pub fn set_service(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.service = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl {
            port: core::default::Default::default(),
            service: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `port` after provisioning.\n"]
    pub fn port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.port", self.base))
    }

    #[doc= "Get a reference to the value of field `service` after provisioning.\n"]
    pub fn service(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.service", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    value: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `value`.\n"]
    pub fn set_value(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.value = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl {
            name: core::default::Default::default(),
            value: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `value` after provisioning.\n"]
    pub fn value(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.value", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    http_headers: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    path: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    port: Option<PrimField<f64>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
    #[doc= "Set the field `http_headers`.\n"]
    pub fn set_http_headers(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersEl>>,
    ) -> Self {
        self.http_headers = Some(v.into());
        self
    }

    #[doc= "Set the field `path`.\n"]
    pub fn set_path(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.path = Some(v.into());
        self
    }

    #[doc= "Set the field `port`.\n"]
    pub fn set_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.port = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl {
            http_headers: core::default::Default::default(),
            path: core::default::Default::default(),
            port: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `http_headers` after provisioning.\n"]
    pub fn http_headers(
        &self,
    ) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElHttpHeadersElRef> {
        ListRef::new(self.shared().clone(), format!("{}.http_headers", self.base))
    }

    #[doc= "Get a reference to the value of field `path` after provisioning.\n"]
    pub fn path(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.path", self.base))
    }

    #[doc= "Get a reference to the value of field `port` after provisioning.\n"]
    pub fn port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.port", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    port: Option<PrimField<f64>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
    #[doc= "Set the field `port`.\n"]
    pub fn set_port(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.port = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl {
            port: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef {
    fn new(
        shared: StackShared,
        base: String,
    ) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `port` after provisioning.\n"]
    pub fn port(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.port", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    failure_threshold: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    grpc: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    http_get: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    initial_delay_seconds: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    period_seconds: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    tcp_socket: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    timeout_seconds: Option<PrimField<f64>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
    #[doc= "Set the field `failure_threshold`.\n"]
    pub fn set_failure_threshold(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.failure_threshold = Some(v.into());
        self
    }

    #[doc= "Set the field `grpc`.\n"]
    pub fn set_grpc(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcEl>>,
    ) -> Self {
        self.grpc = Some(v.into());
        self
    }

    #[doc= "Set the field `http_get`.\n"]
    pub fn set_http_get(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetEl>>,
    ) -> Self {
        self.http_get = Some(v.into());
        self
    }

    #[doc= "Set the field `initial_delay_seconds`.\n"]
    pub fn set_initial_delay_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.initial_delay_seconds = Some(v.into());
        self
    }

    #[doc= "Set the field `period_seconds`.\n"]
    pub fn set_period_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.period_seconds = Some(v.into());
        self
    }

    #[doc= "Set the field `tcp_socket`.\n"]
    pub fn set_tcp_socket(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketEl>>,
    ) -> Self {
        self.tcp_socket = Some(v.into());
        self
    }

    #[doc= "Set the field `timeout_seconds`.\n"]
    pub fn set_timeout_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.timeout_seconds = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl {
            failure_threshold: core::default::Default::default(),
            grpc: core::default::Default::default(),
            http_get: core::default::Default::default(),
            initial_delay_seconds: core::default::Default::default(),
            period_seconds: core::default::Default::default(),
            tcp_socket: core::default::Default::default(),
            timeout_seconds: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef {
        DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `failure_threshold` after provisioning.\n"]
    pub fn failure_threshold(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.failure_threshold", self.base))
    }

    #[doc= "Get a reference to the value of field `grpc` after provisioning.\n"]
    pub fn grpc(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElGrpcElRef> {
        ListRef::new(self.shared().clone(), format!("{}.grpc", self.base))
    }

    #[doc= "Get a reference to the value of field `http_get` after provisioning.\n"]
    pub fn http_get(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElHttpGetElRef> {
        ListRef::new(self.shared().clone(), format!("{}.http_get", self.base))
    }

    #[doc= "Get a reference to the value of field `initial_delay_seconds` after provisioning.\n"]
    pub fn initial_delay_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.initial_delay_seconds", self.base))
    }

    #[doc= "Get a reference to the value of field `period_seconds` after provisioning.\n"]
    pub fn period_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.period_seconds", self.base))
    }

    #[doc= "Get a reference to the value of field `tcp_socket` after provisioning.\n"]
    pub fn tcp_socket(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElTcpSocketElRef> {
        ListRef::new(self.shared().clone(), format!("{}.tcp_socket", self.base))
    }

    #[doc= "Get a reference to the value of field `timeout_seconds` after provisioning.\n"]
    pub fn timeout_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.timeout_seconds", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    mount_path: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
    #[doc= "Set the field `mount_path`.\n"]
    pub fn set_mount_path(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.mount_path = Some(v.into());
        self
    }

    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
        DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl {
            mount_path: core::default::Default::default(),
            name: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef {
        DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `mount_path` after provisioning.\n"]
    pub fn mount_path(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.mount_path", self.base))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElContainersEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    args: Option<ListField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    command: Option<ListField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    env: Option<SetField<DataCloudRunServiceTemplateElSpecElContainersElEnvEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    env_from: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    image: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    liveness_probe: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    ports: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElPortsEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    resources: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElResourcesEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    startup_probe: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    volume_mounts: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    working_dir: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElContainersEl {
    #[doc= "Set the field `args`.\n"]
    pub fn set_args(mut self, v: impl Into<ListField<PrimField<String>>>) -> Self {
        self.args = Some(v.into());
        self
    }

    #[doc= "Set the field `command`.\n"]
    pub fn set_command(mut self, v: impl Into<ListField<PrimField<String>>>) -> Self {
        self.command = Some(v.into());
        self
    }

    #[doc= "Set the field `env`.\n"]
    pub fn set_env(mut self, v: impl Into<SetField<DataCloudRunServiceTemplateElSpecElContainersElEnvEl>>) -> Self {
        self.env = Some(v.into());
        self
    }

    #[doc= "Set the field `env_from`.\n"]
    pub fn set_env_from(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElEnvFromEl>>,
    ) -> Self {
        self.env_from = Some(v.into());
        self
    }

    #[doc= "Set the field `image`.\n"]
    pub fn set_image(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.image = Some(v.into());
        self
    }

    #[doc= "Set the field `liveness_probe`.\n"]
    pub fn set_liveness_probe(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeEl>>,
    ) -> Self {
        self.liveness_probe = Some(v.into());
        self
    }

    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `ports`.\n"]
    pub fn set_ports(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElPortsEl>>) -> Self {
        self.ports = Some(v.into());
        self
    }

    #[doc= "Set the field `resources`.\n"]
    pub fn set_resources(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElResourcesEl>>,
    ) -> Self {
        self.resources = Some(v.into());
        self
    }

    #[doc= "Set the field `startup_probe`.\n"]
    pub fn set_startup_probe(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeEl>>,
    ) -> Self {
        self.startup_probe = Some(v.into());
        self
    }

    #[doc= "Set the field `volume_mounts`.\n"]
    pub fn set_volume_mounts(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsEl>>,
    ) -> Self {
        self.volume_mounts = Some(v.into());
        self
    }

    #[doc= "Set the field `working_dir`.\n"]
    pub fn set_working_dir(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.working_dir = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElContainersEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElContainersEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElContainersEl {}

impl BuildDataCloudRunServiceTemplateElSpecElContainersEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElContainersEl {
        DataCloudRunServiceTemplateElSpecElContainersEl {
            args: core::default::Default::default(),
            command: core::default::Default::default(),
            env: core::default::Default::default(),
            env_from: core::default::Default::default(),
            image: core::default::Default::default(),
            liveness_probe: core::default::Default::default(),
            name: core::default::Default::default(),
            ports: core::default::Default::default(),
            resources: core::default::Default::default(),
            startup_probe: core::default::Default::default(),
            volume_mounts: core::default::Default::default(),
            working_dir: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElContainersElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElContainersElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElContainersElRef {
        DataCloudRunServiceTemplateElSpecElContainersElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElContainersElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `args` after provisioning.\n"]
    pub fn args(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.args", self.base))
    }

    #[doc= "Get a reference to the value of field `command` after provisioning.\n"]
    pub fn command(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.command", self.base))
    }

    #[doc= "Get a reference to the value of field `env` after provisioning.\n"]
    pub fn env(&self) -> SetRef<DataCloudRunServiceTemplateElSpecElContainersElEnvElRef> {
        SetRef::new(self.shared().clone(), format!("{}.env", self.base))
    }

    #[doc= "Get a reference to the value of field `env_from` after provisioning.\n"]
    pub fn env_from(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElEnvFromElRef> {
        ListRef::new(self.shared().clone(), format!("{}.env_from", self.base))
    }

    #[doc= "Get a reference to the value of field `image` after provisioning.\n"]
    pub fn image(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.image", self.base))
    }

    #[doc= "Get a reference to the value of field `liveness_probe` after provisioning.\n"]
    pub fn liveness_probe(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElLivenessProbeElRef> {
        ListRef::new(self.shared().clone(), format!("{}.liveness_probe", self.base))
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `ports` after provisioning.\n"]
    pub fn ports(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElPortsElRef> {
        ListRef::new(self.shared().clone(), format!("{}.ports", self.base))
    }

    #[doc= "Get a reference to the value of field `resources` after provisioning.\n"]
    pub fn resources(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElResourcesElRef> {
        ListRef::new(self.shared().clone(), format!("{}.resources", self.base))
    }

    #[doc= "Get a reference to the value of field `startup_probe` after provisioning.\n"]
    pub fn startup_probe(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElStartupProbeElRef> {
        ListRef::new(self.shared().clone(), format!("{}.startup_probe", self.base))
    }

    #[doc= "Get a reference to the value of field `volume_mounts` after provisioning.\n"]
    pub fn volume_mounts(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElVolumeMountsElRef> {
        ListRef::new(self.shared().clone(), format!("{}.volume_mounts", self.base))
    }

    #[doc= "Get a reference to the value of field `working_dir` after provisioning.\n"]
    pub fn working_dir(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.working_dir", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    key: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    mode: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    path: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
    #[doc= "Set the field `key`.\n"]
    pub fn set_key(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.key = Some(v.into());
        self
    }

    #[doc= "Set the field `mode`.\n"]
    pub fn set_mode(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.mode = Some(v.into());
        self
    }

    #[doc= "Set the field `path`.\n"]
    pub fn set_path(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.path = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {}

impl BuildDataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
        DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl {
            key: core::default::Default::default(),
            mode: core::default::Default::default(),
            path: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef {
        DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `key` after provisioning.\n"]
    pub fn key(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.key", self.base))
    }

    #[doc= "Get a reference to the value of field `mode` after provisioning.\n"]
    pub fn mode(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.mode", self.base))
    }

    #[doc= "Get a reference to the value of field `path` after provisioning.\n"]
    pub fn path(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.path", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    default_mode: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    items: Option<ListField<DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    secret_name: Option<PrimField<String>>,
}

impl DataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
    #[doc= "Set the field `default_mode`.\n"]
    pub fn set_default_mode(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.default_mode = Some(v.into());
        self
    }

    #[doc= "Set the field `items`.\n"]
    pub fn set_items(
        mut self,
        v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsEl>>,
    ) -> Self {
        self.items = Some(v.into());
        self
    }

    #[doc= "Set the field `secret_name`.\n"]
    pub fn set_secret_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.secret_name = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElVolumesElSecretEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElVolumesElSecretEl {}

impl BuildDataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
        DataCloudRunServiceTemplateElSpecElVolumesElSecretEl {
            default_mode: core::default::Default::default(),
            items: core::default::Default::default(),
            secret_name: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef {
        DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `default_mode` after provisioning.\n"]
    pub fn default_mode(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.default_mode", self.base))
    }

    #[doc= "Get a reference to the value of field `items` after provisioning.\n"]
    pub fn items(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElVolumesElSecretElItemsElRef> {
        ListRef::new(self.shared().clone(), format!("{}.items", self.base))
    }

    #[doc= "Get a reference to the value of field `secret_name` after provisioning.\n"]
    pub fn secret_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.secret_name", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecElVolumesEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    secret: Option<ListField<DataCloudRunServiceTemplateElSpecElVolumesElSecretEl>>,
}

impl DataCloudRunServiceTemplateElSpecElVolumesEl {
    #[doc= "Set the field `name`.\n"]
    pub fn set_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.name = Some(v.into());
        self
    }

    #[doc= "Set the field `secret`.\n"]
    pub fn set_secret(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElVolumesElSecretEl>>) -> Self {
        self.secret = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecElVolumesEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecElVolumesEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecElVolumesEl {}

impl BuildDataCloudRunServiceTemplateElSpecElVolumesEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecElVolumesEl {
        DataCloudRunServiceTemplateElSpecElVolumesEl {
            name: core::default::Default::default(),
            secret: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElVolumesElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElVolumesElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElVolumesElRef {
        DataCloudRunServiceTemplateElSpecElVolumesElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElVolumesElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `name` after provisioning.\n"]
    pub fn name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.name", self.base))
    }

    #[doc= "Get a reference to the value of field `secret` after provisioning.\n"]
    pub fn secret(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElVolumesElSecretElRef> {
        ListRef::new(self.shared().clone(), format!("{}.secret", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateElSpecEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    container_concurrency: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    containers: Option<ListField<DataCloudRunServiceTemplateElSpecElContainersEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    service_account_name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    serving_state: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    timeout_seconds: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    volumes: Option<ListField<DataCloudRunServiceTemplateElSpecElVolumesEl>>,
}

impl DataCloudRunServiceTemplateElSpecEl {
    #[doc= "Set the field `container_concurrency`.\n"]
    pub fn set_container_concurrency(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.container_concurrency = Some(v.into());
        self
    }

    #[doc= "Set the field `containers`.\n"]
    pub fn set_containers(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElContainersEl>>) -> Self {
        self.containers = Some(v.into());
        self
    }

    #[doc= "Set the field `service_account_name`.\n"]
    pub fn set_service_account_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.service_account_name = Some(v.into());
        self
    }

    #[doc= "Set the field `serving_state`.\n"]
    pub fn set_serving_state(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.serving_state = Some(v.into());
        self
    }

    #[doc= "Set the field `timeout_seconds`.\n"]
    pub fn set_timeout_seconds(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.timeout_seconds = Some(v.into());
        self
    }

    #[doc= "Set the field `volumes`.\n"]
    pub fn set_volumes(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElSpecElVolumesEl>>) -> Self {
        self.volumes = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateElSpecEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateElSpecEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateElSpecEl {}

impl BuildDataCloudRunServiceTemplateElSpecEl {
    pub fn build(self) -> DataCloudRunServiceTemplateElSpecEl {
        DataCloudRunServiceTemplateElSpecEl {
            container_concurrency: core::default::Default::default(),
            containers: core::default::Default::default(),
            service_account_name: core::default::Default::default(),
            serving_state: core::default::Default::default(),
            timeout_seconds: core::default::Default::default(),
            volumes: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElSpecElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElSpecElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElSpecElRef {
        DataCloudRunServiceTemplateElSpecElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElSpecElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `container_concurrency` after provisioning.\n"]
    pub fn container_concurrency(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.container_concurrency", self.base))
    }

    #[doc= "Get a reference to the value of field `containers` after provisioning.\n"]
    pub fn containers(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElContainersElRef> {
        ListRef::new(self.shared().clone(), format!("{}.containers", self.base))
    }

    #[doc= "Get a reference to the value of field `service_account_name` after provisioning.\n"]
    pub fn service_account_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.service_account_name", self.base))
    }

    #[doc= "Get a reference to the value of field `serving_state` after provisioning.\n"]
    pub fn serving_state(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.serving_state", self.base))
    }

    #[doc= "Get a reference to the value of field `timeout_seconds` after provisioning.\n"]
    pub fn timeout_seconds(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.timeout_seconds", self.base))
    }

    #[doc= "Get a reference to the value of field `volumes` after provisioning.\n"]
    pub fn volumes(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElVolumesElRef> {
        ListRef::new(self.shared().clone(), format!("{}.volumes", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTemplateEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    metadata: Option<ListField<DataCloudRunServiceTemplateElMetadataEl>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    spec: Option<ListField<DataCloudRunServiceTemplateElSpecEl>>,
}

impl DataCloudRunServiceTemplateEl {
    #[doc= "Set the field `metadata`.\n"]
    pub fn set_metadata(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElMetadataEl>>) -> Self {
        self.metadata = Some(v.into());
        self
    }

    #[doc= "Set the field `spec`.\n"]
    pub fn set_spec(mut self, v: impl Into<ListField<DataCloudRunServiceTemplateElSpecEl>>) -> Self {
        self.spec = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTemplateEl {
    type O = BlockAssignable<DataCloudRunServiceTemplateEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTemplateEl {}

impl BuildDataCloudRunServiceTemplateEl {
    pub fn build(self) -> DataCloudRunServiceTemplateEl {
        DataCloudRunServiceTemplateEl {
            metadata: core::default::Default::default(),
            spec: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTemplateElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTemplateElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTemplateElRef {
        DataCloudRunServiceTemplateElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTemplateElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `metadata` after provisioning.\n"]
    pub fn metadata(&self) -> ListRef<DataCloudRunServiceTemplateElMetadataElRef> {
        ListRef::new(self.shared().clone(), format!("{}.metadata", self.base))
    }

    #[doc= "Get a reference to the value of field `spec` after provisioning.\n"]
    pub fn spec(&self) -> ListRef<DataCloudRunServiceTemplateElSpecElRef> {
        ListRef::new(self.shared().clone(), format!("{}.spec", self.base))
    }
}

#[derive(Serialize)]
pub struct DataCloudRunServiceTrafficEl {
    #[serde(skip_serializing_if = "Option::is_none")]
    latest_revision: Option<PrimField<bool>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    percent: Option<PrimField<f64>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    revision_name: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    tag: Option<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    url: Option<PrimField<String>>,
}

impl DataCloudRunServiceTrafficEl {
    #[doc= "Set the field `latest_revision`.\n"]
    pub fn set_latest_revision(mut self, v: impl Into<PrimField<bool>>) -> Self {
        self.latest_revision = Some(v.into());
        self
    }

    #[doc= "Set the field `percent`.\n"]
    pub fn set_percent(mut self, v: impl Into<PrimField<f64>>) -> Self {
        self.percent = Some(v.into());
        self
    }

    #[doc= "Set the field `revision_name`.\n"]
    pub fn set_revision_name(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.revision_name = Some(v.into());
        self
    }

    #[doc= "Set the field `tag`.\n"]
    pub fn set_tag(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.tag = Some(v.into());
        self
    }

    #[doc= "Set the field `url`.\n"]
    pub fn set_url(mut self, v: impl Into<PrimField<String>>) -> Self {
        self.url = Some(v.into());
        self
    }
}

impl ToListMappable for DataCloudRunServiceTrafficEl {
    type O = BlockAssignable<DataCloudRunServiceTrafficEl>;

    fn do_map(self, base: String) -> Self::O {
        BlockAssignable::Dynamic(DynamicBlock {
            for_each: format!("${{{}}}", base),
            iterator: "each".into(),
            content: self,
        })
    }
}

pub struct BuildDataCloudRunServiceTrafficEl {}

impl BuildDataCloudRunServiceTrafficEl {
    pub fn build(self) -> DataCloudRunServiceTrafficEl {
        DataCloudRunServiceTrafficEl {
            latest_revision: core::default::Default::default(),
            percent: core::default::Default::default(),
            revision_name: core::default::Default::default(),
            tag: core::default::Default::default(),
            url: core::default::Default::default(),
        }
    }
}

pub struct DataCloudRunServiceTrafficElRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataCloudRunServiceTrafficElRef {
    fn new(shared: StackShared, base: String) -> DataCloudRunServiceTrafficElRef {
        DataCloudRunServiceTrafficElRef {
            shared: shared,
            base: base.to_string(),
        }
    }
}

impl DataCloudRunServiceTrafficElRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    #[doc= "Get a reference to the value of field `latest_revision` after provisioning.\n"]
    pub fn latest_revision(&self) -> PrimExpr<bool> {
        PrimExpr::new(self.shared().clone(), format!("{}.latest_revision", self.base))
    }

    #[doc= "Get a reference to the value of field `percent` after provisioning.\n"]
    pub fn percent(&self) -> PrimExpr<f64> {
        PrimExpr::new(self.shared().clone(), format!("{}.percent", self.base))
    }

    #[doc= "Get a reference to the value of field `revision_name` after provisioning.\n"]
    pub fn revision_name(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.revision_name", self.base))
    }

    #[doc= "Get a reference to the value of field `tag` after provisioning.\n"]
    pub fn tag(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.tag", self.base))
    }

    #[doc= "Get a reference to the value of field `url` after provisioning.\n"]
    pub fn url(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.url", self.base))
    }
}
